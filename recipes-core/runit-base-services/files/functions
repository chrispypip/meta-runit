# *-*-shell-*-*

# Basic meta-runit functionalities for providing core-services and service
# features like emits to console, logs, etc.

PATH=/bin:/usr/bin:/sbin:/usr/sbin

# Provide basic colorized console output for feedback to console, etc.
msg() {
    # bold
    printf "\033[1m=> $@\033[m\n"
}

msg_ok() {
    # bold/green
    printf "\033[1m\033[32m OK \033[m\n"
}

msg_done() {
    # bold/green
    printf "\033[1m\033[32m DONE: $@\033[m\n"
}

msg_error() {
    # bold/red
    printf "\033[1m\033[31mERROR: $@\033[m\n"
}

msg_warn() {
    # bold/yellow
    printf "\033[1m\033[33mWARNING: $@\033[m\n"
}

# Pop to a shell when things BREAK.
emergency_shell() {
    echo
    echo "Cannot continue due to errors above, starting emergency shell."
    echo "When ready type exit to continue booting."
    /bin/sh -l
}

detect_virt() {
   # Detect LXC containers
   [ ! -e /proc/self/environ ] && return
   if grep -q lxc /proc/self/environ >/dev/null; then
       export VIRTUALIZATION=1
   fi
}

deactivate_vgs() {
   _group=${1:-All}
   if [ -x /sbin/vgchange -o -x /bin/vgchange ]; then
       vgs=$(vgs|wc -l)
       if [ $vgs -gt 0 ]; then
           msg "Deactivating $_group LVM Volume Groups..."
           vgchange -an
       fi
   fi
}

deactivate_crypt() {
   if [ -x /sbin/dmsetup -o -x /bin/dmsetup ]; then
       msg "Deactivating Crypt Volumes"
       for v in $(dmsetup ls --target crypt --exec "dmsetup info -c --noheadings -o open,name"); do
           [ ${v%%:*} = "0" ] && cryptsetup close ${v##*:}
       done
       deactivate_vgs "Crypt"
   fi
}

# Peel out the service name from the execution string for this shell.
get_svc_name() {
    echo $(basename $(dirname $(realpath $0)))
}


# Generate syslog entries for the svc in question.  Presume that
# if we have a log user, we also have, at minimum, a syslog and logger
# present to generate the event entry.  If you've got logger, though
# it will not error out if the syslog daemon set is down, not there, etc.
svc_log() {
    logger "$(get_svc_name) : $@"
}

# Handle a self-shutdown for a one-shot "service" that runs/tries to run ONCE and
# then shuts itself down according to needs, or when we fail in tests or similar
# in the service execution.
svc_stop() {
    # The 'basename' of the dirname of the realpath of the script calling this
    # should be the one that corresponds to the service's name, thereby doing
    # a transparent self-shutdown of the same if we call the stop on it.
    sv stop $(get_svc_name)
    # Not strictly needed, but if you're hand-testing services
    # files, you probably wanted to do an exit here anyhow.
    exit
}

# Series of functions to handle ran/not-ran for a one-shot for check scripting
# for services groups, etc. use.  We want/need to act like the service is
# "running" if it's been "ran" (i.e. just before calling sv_stop...)
svc_has_ran() {
    # Check to see if the service in question has been flagged in /var/tmp/runit-svcs
    [ -e /var/tmp/runit-svcs ] && [ -e /var/tmp/runit-svcs/$(get_svc_name) ] && return 0 || return 1
}

svc_ran() {
    [ -e /var/tmp/runit-svcs ] && mkdir -p /var/tmp/runit-svcs
    touch /var/tmp/runit-svcs/$(get_svc_name)
}

svc_reset_run_flag() {
    SVC_NAME=$(get_svc_name)
    [ -e /var/tmp/runit-svcs/$SVC_NAME ] && rm -f /var/tmp/runit-svcs/$SVC_NAME
}

# Sidestep potential problems for check/status- it's not returning claimed
# values in runit itself.  Will fix eventually either by re-documenting
# in the wiki or fix the return value to MATCH what is claimed.  So, it's
# not working.  This kind of requires the service in question needing this
# to source the functions.  The grep returns the check result as up or not
# running...  We also want it to emit so we have the reason why the service
# didn't start when it should've.  Basically like 'sv check' is supposed
# to work.
svc_running() {
    RETV=1
    TIMEOUT=7
    # Nab the -w and the next param first if they're there...
    if [ "$1" == "-w" ] ; then
        # Next value presumed to be a timeout in seconds for the whole
        # checking algorithm.
        TIMEOUT=$2
        # Take the two off the param list...
        shift
        shift
    fi
    # Now, do the check process.  We check every 100 msec for the duration
    # of seconds that we're doing the check for...  When this gets fixed, it
    # should collapse to just calling 'sv -w $TIMEOUT check $@' for this
    # loopy junk that only largely works.
    for count in $(seq 0 $TIMEOUT) ; do
        for sleep in {1..10}; do
            CHK=`sv -w 0 check "$@"`
            echo $CHK | grep -q 'down:'
            if [ $? -eq 0 ] ; then
                millisleep 100
            else
                # No "down" showing in the check list...it's UP.
                RETV=0
                break
            fi
        done
        if [ $RETV -eq 0 ] ; then
            # We're UP.
            break
        else
            # Part of the check here is down- report the result.
            echo $CHK
        fi
    done
    return $RETV
}