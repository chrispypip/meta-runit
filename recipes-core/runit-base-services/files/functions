# *-*-shell-*-*

PATH=/bin:/usr/bin:/sbin:/usr/sbin

msg() {
    # bold 
    printf "\033[1m=> $@\033[m\n"
}

msg_ok() {
    # bold/green
    printf "\033[1m\033[32m OK \033[m\n"
}

msg_done() {
    # bold/green
    printf "\033[1m\033[32m DONE: $@\033[m\n"
}

msg_error() {
    # bold/red
    printf "\033[1m\033[31mERROR: $@\033[m\n"
}

msg_warn() {
    # bold/yellow
    printf "\033[1m\033[33mWARNING: $@\033[m\n"
}

emergency_shell() {
    echo
    echo "Cannot continue due to errors above, starting emergency shell."
    echo "When ready type exit to continue booting."
    /bin/sh -l
}

detect_virt() {
   # Detect LXC containers
   [ ! -e /proc/self/environ ] && return
   if grep -q lxc /proc/self/environ >/dev/null; then
       export VIRTUALIZATION=1
   fi
}

deactivate_vgs() {
   _group=${1:-All}
   if [ -x /sbin/vgchange -o -x /bin/vgchange ]; then
       vgs=$(vgs|wc -l)
       if [ $vgs -gt 0 ]; then
           msg "Deactivating $_group LVM Volume Groups..."
           vgchange -an
       fi
   fi
}

deactivate_crypt() {
   if [ -x /sbin/dmsetup -o -x /bin/dmsetup ]; then
       msg "Deactivating Crypt Volumes"
       for v in $(dmsetup ls --target crypt --exec "dmsetup info -c --noheadings -o open,name"); do
           [ ${v%%:*} = "0" ] && cryptsetup close ${v##*:}
       done
       deactivate_vgs "Crypt"
   fi
}

# Wrapper doing a "sv check" so it presents itself in a **MUCH** more useful manner
#
# Checks in 100 msec intervals for the list.  If one of the list fails it gathers up
# a list of the failures and reports within the timeout  Call is as follows:
#
# service_deps <timeout> <svcslist>
# 
# Where <timeout> is in seconds, svcslist is the list of checks, separated by spaces.
#
# (FIXME -- This is more a hack than anything else- and we need to do this better
#  as part of the compiled bits and bobs so it's MUCH more efficient...  But later)
#
service_deps() {
    # Must slot into the loop...
    RESULT=1
    # Count's in 10ths of a second, expressed as seconds timeout
    COUNT=$(($1 * 10))
    while [ $RESULT -ne 0 -a $COUNT -ne 0 ]; do
        RESULT=0
        SVCS=""
        for SVC in "$@"; do
            # Use a zero seconds timeout.  This way we don't wait, come through
            # and timeout if we are not up on a check script, etc.
            if [ "$SVC" != "$1" ] ; then 
                # Now, do the check for if something in our list is up or not
                sv -w0 check $SVC 2>&1 > /dev/null
                if [ $? -ne 0 ] ; then
                    RESULT=1;
                    SVCS="$SVCS $SVC"       
                fi
            fi
        done
        if [ $RESULT -ne 0 ] ; then
            COUNT=$($COUNT-1)
            # Sleep 1/10th of a sec...
            millisleep 100
        fi
    done
    if [ $RESULT -ne 0 ] ; then
        # The basename() of `pwd` should be our service we care about...
        SVCNAME=$(basename $(pwd))
        for SVC in $SVCS; do
            msg_warn "Service $SVCNAME dependency $SVC down\n"
        done
        exit 1
    fi
}

